Input	Initial	Has	Number	AvgTime	AvgTime
Size	Order	Dups	of runs	forusel	forsort

//Comparing the results collected for 5000 number inputs, it is clear that there
//is a clear difference in time cost from lists containing duplicates and those with
//duplicates.

//Also, there was a clear difference in time cost between the usel function and the
//in-built function. This was especially accentuated in the data collected for
//randomly sorted inputs.

//Moreover, it is also worth noting that many of the tests on the usel function
//displayed high quantities of "user time cost" when calculating its real-time cost
//when compared to that of the sort function.

//Finally, it is also interesting to note that for non-duplicate lists, random was
//much slower than sorted/reverse lists.  The opposite of this holds true for lists
//with duplicates!
5000	random	no	100	0.036sec	0.004sec
5000	sorted	no	100	0.003sec	0.002sec
5000	reverse	no	100	0.003sec	0.002sec
5000	random	yes	100	0.036sec	0.003sec
5000	sorted	yes	100	0.009sec	0.006sec
5000	reverse	yes	100	0.009sec	0.006sec

//The results of usel were considerably more variant for inputs of 10000 numbers.
//I was receiving values from as low as 0.120 to 0.329 which indicates the function
//I had made varied greatly in terms of sorting efficiency.
10000	random	no	100	0.219sec	0.007sec
10000	sorted	no	100	0.008sec	0.006sec
10000	reverse	no	100	0.008sec	0.006sec
10000	random	yes	100	0.217sec	0.009sec
10000	sorted	yes	100	0.024sec	0.006sec
10000	reverse	yes	100	0.009sec	0.006sec
